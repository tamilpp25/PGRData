---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2020/7/15 15:25
---

local this = {}

function this.OnAwake(rootUi)
    this.GameObject = rootUi.gameObject
    this.Transform = rootUi.transform
    XTool.InitUiObject(this)
    this.InitUI()
    this.AutoAddListeners()
end

function this.InitUI()
    --苹果端菜显示苹果专用登录选项
    this.AppleGroup.gameObject:SetActiveEx(CS.UnityEngine.Application.platform == CS.UnityEngine.RuntimePlatform.IPhonePlayer);
    this.HuaweiGroup.gameObject:SetActiveEx(CS.XHgSdkAgent.IsHuaiwei())
    this.OppoGroup.gameObject:SetActiveEx(CS.XHgSdkAgent.IsOppo())
    --TODO 华为屏蔽
end

function this.AutoAddListeners()
    this.BtnTanchuangClose.onClick:AddListener(this.CloseLoginType)
    this.LoginGoogleBtn.onClick:AddListener(this.GoogleLoginAgent)
    this.LoginFacebookBtn.onClick:AddListener(this.FacebookLoginAgent)
    this.LoginTwitterBtn.onClick:AddListener(this.TwitterLoginAgent)
    this.LoginAppleBtn.onClick:AddListener(this.AppleLoginAgent)
    this.LoginHuaweiBtn.onClick:AddListener(this.HuaweiLoginAgent)
    this.LoginOppoBtn.onClick:AddListener(this.OppoLoginAgent)
    this.LoginVisitorBtn.onClick:AddListener(this.VisitorLoginAgent)
    this.LoginTwitterBtn.transform.parent.gameObject:SetActiveEx(false)
end

function this.SwitchAccountAgent(loginCall)
    if XUserManager.Channel == XUserManager.CHANNEL.Android or XUserManager.Channel == XUserManager.CHANNEL.IOS then
        if XUserManager.UserId == "" or XUserManager.UserId == nil then
            loginCall()
            return
        end
        XUiManager.SystemDialogTip(CS.XTextManager.GetText("TipTitle"), "Confirm to switch account? \nThe account you are currently logged in is\nID:" .. (XUserManager.UserId or ""),
                XUiManager.DialogType.Normal, nil, loginCall)
    end
end


function this.OnAppleLogin()
    --XHgSdkManager.Logout()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Apple)
    this.CloseLoginType()
end

function this.AppleLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnAppleLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnAppleLogin)
    end
end

--function this.SidLoginAgent()
--    if this.CheckBind() then
--        this.SwitchAccountAgent(this.OnSidLogin)
--    else
--        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnSidLogin)
--    end
--end
--
--function this.OnSidLogin()
--    XLuaUiManager.Open("UiAccountSign", function(account, pass)
--        --XHgSdkManager.Logout()
--        XHgSdkManager.LoginSuid(account, pass)
--        this.CloseLoginType()
--    end, nil)
--end

function this.HuaweiLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnHuaweiLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnHuaweiLogin)
    end
end

function this.OnHuaweiLogin()
    --XHgSdkManager.Logout()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Huawei)
    this.CloseLoginType()
end

function this.OppoLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnOppoLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnOppoLogin)
    end
end

function this.OnOppoLogin()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Oppo)
    this.CloseLoginType()
end

function this.GoogleLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnGoogleLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnGoogleLogin)
    end
end

function this.OnGoogleLogin()
    --XHgSdkManager.Logout()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Google)
    this.CloseLoginType()
end

function this.FacebookLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnFacebookLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnFacebookLogin)
    end
end

function this.OnFacebookLogin()
    --XHgSdkManager.Logout()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.FaceBook)
    this.CloseLoginType()
end

function this.TwitterLoginAgent()
    if this.CheckBind() then
        this.SwitchAccountAgent(this.OnTwitterLogin)
    else
        XEventManager.DispatchEvent(XEventId.EVENT_LOGIN_ATTENTION, this.OnTwitterLogin)
    end
end

function this.OnTwitterLogin()
    --XHgSdkManager.Logout()
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Twitter)
    this.CloseLoginType()
end

function this.VisitorLoginAgent()
    this.SwitchAccountAgent(this.OnVisitorLogin)
end

function this.OnVisitorLogin()
    if this.CheckIsLoginWithVisitor() then
        XUiManager.TipText("AlreadySignedGuestAccount")
        return
    end
    XHgSdkManager.SwitchAccount(XHgSdkManager.UserType.Vistor)
    this.CloseLoginType()
end

function this.CheckBind() -- 修改了逻辑（当前存在登录账号且是游客账号时 return false，其余 return true）
    if XUserManager.Channel == XUserManager.CHANNEL.Android or XUserManager.Channel == XUserManager.CHANNEL.IOS then
        if XUserManager.UserId ~= nil and XUserManager.UserId ~= "" and XUserManager.UserType == XHgSdkManager.UserType.Vistor then
            return false
        end
    end

    return true
end

function this.CloseLoginType()
    XLuaUiManager.Close("UiLoginDialog")
end

function this.CheckIsLoginWithVisitor() -- 检查当前是否已经以游客账户登录
    if XUserManager.Channel == XUserManager.CHANNEL.Android or XUserManager.Channel == XUserManager.CHANNEL.IOS then
        if not XHgSdkManager.IsNeedLogin() and XUserManager.UserType == XHgSdkManager.UserType.Vistor then
            return true
        end
    end

    return false
end

return this