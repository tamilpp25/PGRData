---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyupeng.
--- DateTime: 2024/6/3 16:50
---

local XSucceedBossTeamInfoData = require("XModule/XSucceedBoss/DataEntity/XSucceedBossTeamInfoData")
local XSucceedBossStageInfoData = require("XModule/XSucceedBoss/DataEntity/XSucceedBossStageInfoData")
local XSucceedBossBattleResultData = require("XModule/XSucceedBoss/DataEntity/XSucceedBossBattleResultData")
local xSucceedBossSweepStageData = require("XModule/XSucceedBoss/DataEntity/XSucceedBossSweepStageData")

---@class XSucceedBossBattleInfoData
local XSucceedBossBattleInfoData = XClass(nil, "XSucceedBossBattleInfoData")

function XSucceedBossBattleInfoData:Ctor()
    self.ChapterId = 0
    self.StageProgressIndex = 0
    self.ElementId = 0
    ---@type XSucceedBossTeamInfoData
    self.TeamInfo = nil
    self.StageInfos = {}
    ---@type XSucceedBossBattleResultData
    self.LastResult = nil
    ---@type table<number, XSucceedBossSweepStageData>
    self.SweepStages = {}
    self.HistoryResults = {}
    ---@type table<number, XSucceedBossBattleResultData>
    self.HistoryResultsDir = {}
end

function XSucceedBossBattleInfoData:UpdateData(data)
    if XTool.IsTableEmpty(data) then
        return
    end

    self.ChapterId = data.ChapterId
    self.StageProgressIndex = data.StageProgressIndex
    self.ElementId = data.ElementId
    self.TeamInfo = XSucceedBossTeamInfoData.New()
    if data.TeamInfo then
        self.TeamInfo:UpdateData(data.TeamInfo)
    end
    self.StageInfos = {}
    if data.StageInfos then
        for _, v in ipairs(data.StageInfos) do
            local stageInfo = XSucceedBossStageInfoData.New()
            stageInfo:UpdateData(v)
            self.StageInfos[v.StageIndex + 1] = stageInfo
        end
    end
    self.LastResult = XSucceedBossBattleResultData.New()
    if data.LastResult then
        self.LastResult:UpdateData(data.LastResult)
    end
    self.SweepStages = data.SweepStages
    self:UpdateHistoryResults(data.HistoryResults)
end

function XSucceedBossBattleInfoData:GetStageInfos()
    return self.StageInfos
end

function XSucceedBossBattleInfoData:GetStageInfo(stageId)
    return self.StageInfos[stageId]
end

function XSucceedBossBattleInfoData:GetSweepStage(stageId)
    return self.SweepStages[stageId]
end

function XSucceedBossBattleInfoData:UpdateHistoryResults(historyResults)
    self.HistoryResults = {}
    self.HistoryResultsDir = {}
    if historyResults then
        for _, v in ipairs(historyResults) do
            local resultData = XSucceedBossBattleResultData.New()
            resultData:UpdateData(v)
            table.insert(self.HistoryResults, resultData)
            self.HistoryResultsDir[v.StageId] = resultData
        end
    end
end

function XSucceedBossBattleInfoData:GetHistoryResults()
    return self.HistoryResults
end

function XSucceedBossBattleInfoData:GetHistoryResult(stageId)
    return self.HistoryResultsDir[stageId]
end

function XSucceedBossBattleInfoData:GetLastResult()
    return self.LastResult
end

function XSucceedBossBattleInfoData:GetChapterId()
    return self.ChapterId
end

function XSucceedBossBattleInfoData:GetStageProgressIndex()
    return self.StageProgressIndex
end

function XSucceedBossBattleInfoData:GetElementId()
    return self.ElementId
end

function XSucceedBossBattleInfoData:GetTeamInfo()
    return self.TeamInfo
end

function XSucceedBossBattleInfoData:UpdateStageProgressIndex(index)
    self.StageProgressIndex = index
end

return XSucceedBossBattleInfoData