---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyupeng.
--- DateTime: 2024/6/4 9:58
---
local XUiPanelRoleModel = require("XUi/XUiCharacter/XUiPanelRoleModel")
local XUiModelUtility = require("XUi/XUiCharacter/XUiModelUtility")
local XUiSucceedBossChapterGridSkillItem = require("XUi/XUiSucceedBoss/XUiSucceedBossChapterGridSkillItem")
local XUiSucceedBossMonsterItem = require("XUi/XUiSucceedBoss/XSucceedBossMonsterItem")
local XUiSucceedBossPanelGarrisonItem = require("XUi/XUiSucceedBoss/XSucceedBossPanelGarrisonItem")
local XUiBattleRoleRoomSucceedBossProxy = require("XUi/XUiSucceedBoss/BattleRoleRoom/XUiBattleRoleRoomSucceedBossProxy")
local XUiSucceedBossChapterEffect = require("XUi/XUiSucceedBoss/XUiSucceedBossChapterEffect")

---@class XUiSucceedBossChapter : XLuaUi
---@field _Control XSucceedBossControl
local XUiSucceedBossChapter = XLuaUiManager.Register(XLuaUi, "UiSucceedBossChapter")

--重写父类方法
function XUiSucceedBossChapter:OnAwake()
    self.PanelHard = self.PanelHard or XUiHelper.TryGetComponent(self.Transform, "SafeAreaContentPane/PanelChapterDetail/PanelHard")
    self.PanelRoleModel = self.UiModelGo.transform:FindTransform("PanelRoleModel")
    self.DefaultWeaknessText = self.TxtWeakness.text
    ---@type XUiComponent.XUiButton[]
    self.PanelHardLevelPoints = self:GetPanelHardLevelPoints()
    self.GridBoss.gameObject:SetActiveEx(false)
    self.ListGridBuffHard = {}
end

function XUiSucceedBossChapter:GetPanelHardLevelPoints()
    local panelHardLevelPoints = {}
    for i = 1, 4 do
        local button = self["GridHard" .. i]
        table.insert(panelHardLevelPoints, button)

        XUiHelper.RegisterClickEvent(self, button, function()
            self:OnHardLevelClick(i)
        end)
    end
    return panelHardLevelPoints
end

function XUiSucceedBossChapter:OnStart()
    self.MonsterItems = {}
    self.GridSkills = {}
    self.GridBuffs = {}
    self.GridGarrisons = {}

    self:InitStaticData()

    if XTool.IsNumberValid(self.ChapterConfig.TimeId) then
        local endTime = XFunctionManager.GetEndTimeByTimeId(self.ChapterConfig.TimeId)
        self:SetAutoCloseInfo(endTime, function(isEnd)
            if isEnd then
                XUiManager.TipText("SucceedBossChapterTimeEnd")
                self._Control:RequestSucceedBossResetChapter(function()
                    -- 清空灯光特效
                    XSaveTool.SaveData("UiSucceedBossMainEffect" .. XPlayer.Id, 0)
                    self:Close()
                end)
            end
        end)
    end

    self:InitAutoScript()
end

function XUiSucceedBossChapter:OnEnable()
    self:InitData()
    self:AddEventListener()
    self:Refresh()

    -- 通关前两关关卡时，回到玩法界面默认弹出驻守选择界面
    self:AutoSelectGarrison()
end

function XUiSucceedBossChapter:OnDisable()
    self:RemoveEventListener()
end

function XUiSucceedBossChapter:InitStaticData()
    self.ChapterId = self._Control:GetCurrentChapterId()
    self.ChapterConfig = self._Control:GetChapterConfig(self.ChapterId)
    self.MonsterGroupIds = self.ChapterConfig.MonsterGroupIds
end

function XUiSucceedBossChapter:InitData()
    self.StageProgressIndex = self._Control:GetStageProgressIndex()
    self.MonsterGroupConfig = self._Control:GetMonsterGroupConfig(self.MonsterGroupIds[self.StageProgressIndex])

    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        self.SelectIndex = self:GetNotFightMonsterIndex()
        self.CurMonsterId = self.MonsterGroupConfig.MonsterIds[self.SelectIndex]
        self.CurStageId = self._Control:GetMonsterConfig(self.CurMonsterId).StageId
    else
        self.SelectIndex = self.StageProgressIndex
        self.CurMonsterId = self.MonsterGroupConfig.SelectMonster
        self.CurStageId = self._Control:GetMonsterConfigByStageProcessIndex(self.SelectIndex)
    end
end

function XUiSucceedBossChapter:InitAutoScript()
    self:AutoAddListener()
end

function XUiSucceedBossChapter:AutoAddListener()
    self:RegisterClickEvent(self.BtnBack, self.OnBtnBackClick)
    self:RegisterClickEvent(self.BtnMainUi, self.OnBtnMainUiClick)
    self:BindHelpBtn(self.BtnHelp, "SucceedBossActivity")
    self:RegisterClickEvent(self.BtnResetting, self.OnBtnResettingClick)
    self:RegisterClickEvent(self.BtnWeakness, self.OnBtnWeaknessClick)
    self:RegisterClickEvent(self.BtnTongBlack, self.BtnTongBlackClick)
    self:RegisterClickEvent(self.BtnAtkMinus, self.OnBtnAtkMinusClick)
    self:RegisterClickEvent(self.BtnAtkAdd, self.OnBtnAtkAddClick)
    self:RegisterClickEvent(self.BtnSelectWeakness, self.OnBtnWeaknessClick2)
    --self:RegisterClickEvent(self.BtnGridBuffHard, self.OnBtnGridBuffHardClick)
end

function XUiSucceedBossChapter:AddEventListener()
    XEventManager.AddEventListener(XEventId.EVENT_SUCCEED_BOSS_WEAKNESS_UPDATE, self.OnWeaknessUpdate, self)
    XEventManager.AddEventListener(XEventId.EVENT_SUCCEED_BOSS_GARRISON_UPDATE, self.OnGarrisonUpdate, self)
    XEventManager.AddEventListener(XEventId.EVENT_SUCCEED_BOSS_CLICK_FIGHT, self.ClickEnterFight, self)
end

function XUiSucceedBossChapter:RemoveEventListener()
    XEventManager.RemoveEventListener(XEventId.EVENT_SUCCEED_BOSS_WEAKNESS_UPDATE, self.OnWeaknessUpdate, self)
    XEventManager.RemoveEventListener(XEventId.EVENT_SUCCEED_BOSS_GARRISON_UPDATE, self.OnGarrisonUpdate, self)
    XEventManager.RemoveEventListener(XEventId.EVENT_SUCCEED_BOSS_CLICK_FIGHT, self.ClickEnterFight, self)
end

function XUiSucceedBossChapter:OnBtnBackClick()
    self:Close()
end

function XUiSucceedBossChapter:OnBtnMainUiClick()
    XLuaUiManager.RunMain()
end

function XUiSucceedBossChapter:OnBtnResettingClick()
    XUiManager.DialogTip("", CsXTextManagerGetText("SucceedBossResetDialogContent"), nil, nil, function()
        self._Control:RequestSucceedBossResetChapter(function(isHasData)
            if isHasData then
                self:InitData()
                self:Refresh()
            else
                XUiManager.TipText("SucceedBossChapterTimeEnd")
                self:Close()
            end
        end)
    end)
end

function XUiSucceedBossChapter:OnBtnWeaknessClick()
    if not self._Control:CheckCanChangeWeakness() then
        XUiManager.TipText("SucceedBossCanNotChangeWeakness")
        return
    end
    self:OpenChildUi("UiSucceedBossPopupChooseWeakness")
end

function XUiSucceedBossChapter:OnBtnWeaknessClick2()
    if not self._Control:CheckCanChangeWeakness() then
        XUiManager.TipText("SucceedBossCanNotChangeWeakness")
        return
    end

    self:OpenChildUi("UiSucceedBossPopupChooseWeakness", true)
end

function XUiSucceedBossChapter:BtnTongBlackClick()
    local progress = self._Control:GetStageProgressIndex()
    print(progress)

    if self._Control:CheckNeedChooseWeakness() then
        XUiManager.TipText("SucceedBossChooseWeakness")
        return
    end

    if self._Control:CheckNeedGarrison() then
        XLuaUiManager.Open("UiSucceedBossPopupChooseGarrison")
        return
    end

    if not XTool.IsNumberValid(self.CurStageId) then
        return
    end

    local teamData = self._Control:GetTeam(self.ChapterId)
    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        self._Control:RequestSucceedBossSelectMonster(self.CurMonsterId, self.CurSelectLevel, function()
            XLuaUiManager.Open("UiBattleRoleRoom", self.CurStageId, teamData, XUiBattleRoleRoomSucceedBossProxy)
        end)
    else
        XLuaUiManager.Open("UiBattleRoleRoom", self.CurStageId, teamData, XUiBattleRoleRoomSucceedBossProxy)
    end
end

--function XUiSucceedBossChapter:OnBtnAtkMinusClick()
--    local targetLevel = self.CurSelectLevel - 1
--    local isCanSelectLevel = self._Control:CheckCanSelectLevel(self.CurMonsterId, targetLevel)
--    if isCanSelectLevel then
--        self.CurSelectLevel = targetLevel
--        self:RefreshHardLevelPanelByLevel(self.CurSelectLevel)
--    end
--end
--
--function XUiSucceedBossChapter:OnBtnAtkAddClick()
--    local targetLevel = self.CurSelectLevel + 1
--    local isCanSelectLevel = self._Control:CheckCanSelectLevel(self.CurMonsterId, targetLevel)
--    if isCanSelectLevel then
--        self.CurSelectLevel = targetLevel
--        self:RefreshHardLevelPanelByLevel(self.CurSelectLevel)
--    end
--end

--function XUiSucceedBossChapter:OnBtnGridBuffHardClick()
--    if not XTool.IsNumberValid(self.LevelBuffFightEventId) then
--        return
--    end
--    local fightEventShowConfig = self._Control:GetFightEventShowConfig(self.LevelBuffFightEventId)
--    XLuaUiManager.Open("UiReformBuffDetail", {
--        Name = fightEventShowConfig.Name,
--        Icon = fightEventShowConfig.Icon,
--        Description = fightEventShowConfig.Desc,
--    })
--end

function XUiSucceedBossChapter:Refresh()
    self:LoadBossModel()
    --self.TxtTitle.text = self.ChapterConfig.Name .. " " .. self.StageProgressIndex .. "/" .. XTool.GetTableCount(self.ChapterConfig.MonsterGroupIds)
    self.TxtTitle.text = self.ChapterConfig.Name
    if self.TxtProgress then
        self.TxtProgress.text = self.StageProgressIndex .. "/" .. XTool.GetTableCount(self.ChapterConfig.MonsterGroupIds)
    end

    self:RefreshBossList()
    self:RefreshSkillList()
    self:RefreshBuffList()
    self:RefreshWeakness()
    self:RefreshGarrison()
    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        self:RefreshOptional()
    else
        self:RefreshNormal()
    end
end

function XUiSucceedBossChapter:LoadBossModel()
    if not self.RoleModel then
        self.RoleModel = XUiPanelRoleModel.New(self.PanelRoleModel, self.Name, nil, true)
    end

    local curMonsterGroupCfg = self._Control:GetMonsterGroupConfig(self.ChapterConfig.MonsterGroupIds[self.StageProgressIndex])

    local modelId = ""
    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        local curMonsterCfg = self._Control:GetMonsterConfig(curMonsterGroupCfg.MonsterIds[self.SelectIndex])
        modelId = curMonsterCfg.Model
    else
        local curMonsterCfg = self._Control:GetMonsterConfig(curMonsterGroupCfg.SelectMonster)
        modelId = curMonsterCfg.Model
    end

    XUiModelUtility.UpdateMonsterBossModel(self.RoleModel, modelId, XModelManager.MODEL_UINAME.XUiSucceedBossChapter)
end

function XUiSucceedBossChapter:RefreshSkillList()
    local skillFightEventIds = {}
    local hasNew = false
    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        skillFightEventIds, hasNew = self._Control:GetCurrentSkillFightEventIdsOptional(self.SelectIndex)
    else
        skillFightEventIds, hasNew = self._Control:GetCurrentSkillFightEventIds()
    end
    local count = XTool.GetTableCount(skillFightEventIds)
    XUiHelper.RefreshCustomizedList(self.ListSkill, self.GridSkill, count, function(index, go)
        local gridSkillItem = self.GridSkills[index]
        if gridSkillItem == nil then
            gridSkillItem = XUiSucceedBossChapterGridSkillItem.New(go, self)
            self.GridSkills[index] = gridSkillItem
        end
        gridSkillItem:Refresh(skillFightEventIds[index], true, hasNew and index == count)
    end)
end

function XUiSucceedBossChapter:RefreshBuffList()
    local buffFightEventIds = {}
    if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
        buffFightEventIds = self._Control:GetCurrentBuffFightEventIdsOptional(self.SelectIndex)
    else
        buffFightEventIds = self._Control:GetCurrentBuffFightEventIds()
    end
    local count = XTool.GetTableCount(buffFightEventIds)
    XUiHelper.RefreshCustomizedList(self.ListBuff, self.GridBuff, count, function(index, go)
        local gridBuffItem = self.GridBuffs[index]
        if gridBuffItem == nil then
            gridBuffItem = XUiSucceedBossChapterGridSkillItem.New(go, self)
            self.GridBuffs[index] = gridBuffItem
        end
        gridBuffItem:Refresh(buffFightEventIds[index], false, index == count)
    end)
end

function XUiSucceedBossChapter:RefreshBossList()
    if self.MonsterGroupConfig then
        local monsterIds = self.MonsterGroupConfig.MonsterIds
        for index, monsterId in ipairs(monsterIds) do
            local monsterConfig = self._Control:GetMonsterConfig(monsterId)
            if monsterConfig then
                local monsterItem = self.MonsterItems[index]
                local gridRoot = self["GridBoss" .. index]
                if not monsterItem and gridRoot then
                    local tempGameObject = XUiHelper.Instantiate(self.GridBoss, gridRoot)
                    tempGameObject.transform.localPosition = Vector3.zero
                    monsterItem = XUiSucceedBossMonsterItem.New(tempGameObject, self)
                    self.MonsterItems[index] = monsterItem
                end

                monsterItem:Open()
                monsterItem:Refresh(monsterId, XEnumConst.SucceedBoss.BossHeadUseType.Chapter)
                monsterItem:SetPanelSelectActive(index == self.SelectIndex)
                if self.ChapterConfig.Type == XEnumConst.SucceedBoss.ChapterType.Optional then
                    monsterItem:SetPanelLockActive(false)
                    monsterItem:RegisterClickEvent(function()
                        self:OnBtnBossClick(index)
                    end)
                else
                    monsterItem:SetPanelLockActive(index > self.StageProgressIndex)
                end
            end
        end
    end
end

function XUiSucceedBossChapter:OnBtnBossClick(index)
    if self.SelectIndex == index then
        return
    end

    local targetMonsterId = self.MonsterGroupConfig.MonsterIds[index]
    local isFoughtBoss = self._Control:CheckMonsterFought(targetMonsterId)

    if isFoughtBoss then
        XUiManager.TipText("SucceedBossMonsterFought")
        return
    else
        self.SelectIndex = index
        self.CurMonsterId = targetMonsterId
        self.CurStageId = self._Control:GetMonsterConfig(targetMonsterId).StageId
        self:Refresh()
    end
end

function XUiSucceedBossChapter:RefreshWeakness()
    local weaknessId = self._Control:GetElementId()
    if XTool.IsNumberValid(weaknessId) then
        self.RImgWeakness.gameObject:SetActiveEx(true)
        self.ImgWeaknessAdd.gameObject:SetActiveEx(false)
        self.RImgWeakness:SetRawImage(self._Control:GetSucceedBossElementIcon(weaknessId))
        self.TxtWeakness.text = self._Control:GetSucceedBossElementName(weaknessId)
        self.BtnTongBlack.gameObject:SetActiveEx(true)
        if self.BtnSelectWeakness then
            self.BtnSelectWeakness.gameObject:SetActiveEx(false)
        end
    else
        self.RImgWeakness.gameObject:SetActiveEx(false)
        self.ImgWeaknessAdd.gameObject:SetActiveEx(true)
        self.TxtWeakness.text = self.DefaultWeaknessText
        self.BtnTongBlack.gameObject:SetActiveEx(false)
        if self.BtnSelectWeakness then
            self.BtnSelectWeakness.gameObject:SetActiveEx(true)
        end
    end
end

function XUiSucceedBossChapter:RefreshGarrison()
    local stageCount = XTool.GetTableCount(self.ChapterConfig.MonsterGroupIds)
    XUiHelper.RefreshCustomizedList(self.ListGarrison, self.PanelGarrison, stageCount - 1, function(index, go)
        local gridPanelGarrison = self.GridGarrisons[index]
        if gridPanelGarrison == nil then
            gridPanelGarrison = XUiSucceedBossPanelGarrisonItem.New(go, self)
            self.GridGarrisons[index] = gridPanelGarrison
        end
        gridPanelGarrison:Refresh(self._Control:GetGarrisonInfoByIndex(index))
    end)
end

function XUiSucceedBossChapter:RefreshNormal()
    if self.PanelHard then
        self.PanelHard.gameObject:SetActiveEx(false)
    end
    self:RefreshInfo()
end

function XUiSucceedBossChapter:RefreshOptional()
    self.PanelHard.gameObject:SetActiveEx(true)
    self:RefreshInfo()
end

function XUiSucceedBossChapter:RefreshInfo()
    self.TxtName.text = self._Control:GetMonsterConfig(self.CurMonsterId).Name
    local isMonsterPass, maxLevel = self._Control:CheckMonsterPass(self.CurMonsterId)
    if self.TxtNotPass then
        self.TxtNotPass.gameObject:SetActiveEx(not isMonsterPass)
    end
    self:RefreshHardLevelPanel(isMonsterPass, maxLevel)
end

function XUiSucceedBossChapter:GetNotFightMonsterIndex()
    if self.MonsterGroupConfig then
        local monsterIds = self.MonsterGroupConfig.MonsterIds
        for index, monsterId in ipairs(monsterIds) do
            if not self._Control:CheckMonsterFought(monsterId) then
                return index
            end
        end
    end

    return 1
end

function XUiSucceedBossChapter:RefreshHardLevelPanel(isMonsterPass, maxLevel)
    local defaultSelect = self:GetDefaultSelect()
    self.CurSelectLevel = defaultSelect or maxLevel
    local isCanSweep = XMVCA.XSucceedBoss:CheckChapterStageCanSweep(true)
    local isCanSweep4Monster = isMonsterPass and isCanSweep
    -- 此文本在"开始战斗"按钮下
    if self.TxtSweepScore then
        self.TxtSweepScore.gameObject:SetActiveEx(isCanSweep4Monster)
    end
    -- 此文本在"选择弱点"按钮下
    if self.TxtSweepScore2 then
        self.TxtSweepScore2.gameObject:SetActiveEx(isMonsterPass and isCanSweep4Monster)
    end

    self:RefreshHardLevelPanelByLevel(self.CurSelectLevel)
    self:RefreshHardGrid()
    self:RefreshHardLevelSelectState()
end

function XUiSucceedBossChapter:RefreshHardLevelPanelByLevel(level)
    local levelConfig = self._Control:GetMonsterLevelConfig(self.CurMonsterId, level)

    -- v3.4 第一二章没有难度配置
    if not levelConfig then
        return
    end

    self.LevelBuffFightEventId = levelConfig.FightEventId
    self:RefreshListBuffHard()

    local maxLevel = self._Control:GetMaxLevel(self.CurMonsterId)
    if level == 1 and maxLevel == 1 then
        self.TxtScore.gameObject:SetActiveEx(false)
    else
        self.TxtScore.gameObject:SetActiveEx(true)
        self.TxtScore.text = levelConfig.MonsterScore
    end

    if self.TxtSweepScore then
        local curPassChapterInfo = self._Control:GetPassChapterInfo(self.ChapterId)
        if curPassChapterInfo then
            local passChapterMaxScore = curPassChapterInfo:GetMaxScore()
            if passChapterMaxScore < levelConfig.SweepScore then
                self.TxtSweepScore.text = XUiHelper.GetText("SucceedBossCanNotSweep", levelConfig.SweepScore)
            else
                self.TxtSweepScore.text = XUiHelper.GetText("SucceedBossCanSweep")
            end
        end
    end
end

function XUiSucceedBossChapter:GetSucceedBossCharacterBuffIconAndDesc(defendId)
    return self._Control:GetSucceedBossCharacterBuffIconAndDesc(defendId)
end

--region 事件处理

function XUiSucceedBossChapter:OnWeaknessUpdate()
    self:RefreshWeakness()
end

function XUiSucceedBossChapter:OnGarrisonUpdate()
    self:RefreshGarrison()
end

--endregion

function XUiSucceedBossChapter:RefreshHardGrid()
    local maxLevel = self._Control:GetMaxLevel(self.CurMonsterId)
    for i, point in ipairs(self.PanelHardLevelPoints) do
        point.gameObject:SetActiveEx(i <= maxLevel)

        -- 未解锁难度，图标需要增加锁图标，点击难度无法选中并提示“需通关上一难度解锁”
        if self._Control:IsMonsterLevelUnlock(self.CurMonsterId, i) then
            point:SetButtonState(XUiButtonState.Normal)
        else
            point:SetButtonState(XUiButtonState.Disable)
        end
    end
end

function XUiSucceedBossChapter:OnHardLevelClick(index)
    local monsterId = self.CurMonsterId
    local level = index
    if not self._Control:IsMonsterLevelUnlock(monsterId, level) then
        XUiManager.TipText("SucceedBossLock")
        return
    end

    self.CurSelectLevel = index
    self:RefreshHardLevelPanelByLevel(index)
    self:RefreshHardLevelSelectState()
end

function XUiSucceedBossChapter:RefreshHardLevelSelectState()
    for i = 1, #self.PanelHardLevelPoints do
        if i == self.CurSelectLevel then
            self.PanelHardLevelPoints[i]:SetButtonState(CS.UiButtonState.Select)
        else
            if self._Control:IsMonsterLevelUnlock(self.CurMonsterId, i) then
                self.PanelHardLevelPoints[i]:SetButtonState(CS.UiButtonState.Normal)
            else
                self.PanelHardLevelPoints[i]:SetButtonState(CS.UiButtonState.Disable)
            end
        end
    end
end

function XUiSucceedBossChapter:RefreshListBuffHard()
    if not self.PanelHard.gameObject.activeInHierarchy then
        return
    end
    -- 困难效果
    local levelConfigs = self._Control:GetMonsterLevelConfigs(self.CurMonsterId)
    if #levelConfigs > 0 then
        local validLevels = {}
        for i = 1, self.CurSelectLevel do
            if levelConfigs[i] then
                table.insert(validLevels, levelConfigs[i])
            end
        end
        XTool.UpdateDynamicItem(self.ListGridBuffHard, validLevels, self.GridBuffHard, XUiSucceedBossChapterEffect, self)
        self.ListBuffHard.gameObject:SetActiveEx(true)
    else
        self.ListBuffHard.gameObject:SetActiveEx(false)
    end
end

function XUiSucceedBossChapter:ClickEnterFight()
    self:BtnTongBlackClick()
end

--通关前两关关卡时，回到玩法界面默认弹出驻守选择界面
function XUiSucceedBossChapter:AutoSelectGarrison()
    if self._Control:GetIsJustEnterFight() then
        self._Control:SetNotIsJustEnterFight()
        for i = 1, 2 do
            local garrisonInfo = self._Control:GetGarrisonInfoByIndex(i)
            if garrisonInfo and not garrisonInfo.IsLocked then
                if not garrisonInfo.DefendId or garrisonInfo.DefendId == 0 then
                    local grid = self.GridGarrisons[i]
                    if grid then
                        grid:OnBtnGarrisonClick()
                        return
                    end
                end
            end
        end
    end
end

function XUiSucceedBossChapter:GetDefaultSelect()
    local hasSelect = XSaveTool.GetData("UiSucceedBossChapterSelectIndex" .. XPlayer.Id .. self.CurMonsterId)
    local defaultSelect
    if not hasSelect then
        XSaveTool.SaveData("UiSucceedBossChapterSelectIndex" .. XPlayer.Id .. self.CurMonsterId, true)
        defaultSelect = 2
    end
    if defaultSelect then
        -- v3.4 1,2章没有难度2, 所以默认选1
        local levelConfig = self._Control:GetMonsterLevelConfig(self.CurMonsterId, defaultSelect)
        if not levelConfig then
            defaultSelect = 1
        end
    end
    return defaultSelect
end

return XUiSucceedBossChapter