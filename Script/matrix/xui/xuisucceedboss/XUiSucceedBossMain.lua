local XUiPanelAsset = require("XUi/XUiCommon/XUiPanelAsset")
local XUiGridCommon = require("XUi/XUiObtain/XUiGridCommon")
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyupeng.
--- DateTime: 2024/6/4 9:58
---

local VECTOR2_ZERO = CS.UnityEngine.Vector2.zero
local XUiSucceedBossMainChapterItem = require("XUi/XUiSucceedBoss/XUiSucceedBossMainChapterItem")

---@field _Control XSucceedBossControl
---@class XUiSucceedBossMain:XLuaUi
local XUiSucceedBossMain = XLuaUiManager.Register(XLuaUi, "UiSucceedBossMain")

--重写父类方法
function XUiSucceedBossMain:OnAwake()

end

function XUiSucceedBossMain:OnStart()
    self:AutoRegisterBtnListener()
    self:InitAutoClose()
    self.ChapterItems = {}
    XUiPanelAsset.New(self, self.PanelAsset, XDataCenter.ItemManager.ItemId.FreeGem, XDataCenter.ItemManager.ItemId.ActionPoint, XDataCenter.ItemManager.ItemId.Coin)

    self.GridChapter.gameObject:SetActiveEx(false)
end

function XUiSucceedBossMain:OnEnable()
    self.Super.OnEnable(self)
    self:Refresh()
    self:AddRedPointEvent(self.BtnReward, self.OnCheckBtnRewardRedPoint, self, { XRedPointConditions.Types.CONDITION_SUCCEED_BOSS_TASK_TAB }, nil, true)
    self:PlayFightingEffect()
end

--function XUiSucceedBossMain:OnDisable()
--    self.Super.OnDisable(self)
--end

function XUiSucceedBossMain:OnCheckBtnRewardRedPoint(count)
    self.BtnReward:ShowReddot(count >= 0)
end

function XUiSucceedBossMain:AutoRegisterBtnListener()
    self:RegisterClickEvent(self.BtnBack, self.OnBtnBackClick)
    self:RegisterClickEvent(self.BtnMainUi, self.OnBtnMainUiClick)
    self:RegisterClickEvent(self.BtnReward, self.OnBtnRewardClick)
    self:BindHelpBtn(self.BtnHelp, "SucceedBossActivity")
end

function XUiSucceedBossMain:OnBtnBackClick()
    self:Close()
end

function XUiSucceedBossMain:OnBtnMainUiClick()
    XLuaUiManager.RunMain()
end

function XUiSucceedBossMain:OnBtnRewardClick()
    XLuaUiManager.Open("UiSucceedBossTask")
end

function XUiSucceedBossMain:InitAutoClose()
    local _, endTime = self._Control:GetStartAndEndTime()
    self:SetAutoCloseInfo(endTime, function(isClose)
        if isClose then
            self._Control:HandleActivityEndTime()
        else
            self:RefreshRemainTime()
        end
    end, nil, 1350)
end

function XUiSucceedBossMain:RefreshRemainTime()
    if XTool.IsNumberValid(self.AutoCloseEndTime) then
        local remainTime = self.AutoCloseEndTime - XTime.GetServerNowTimestamp()
        self.TxtTime.text = XUiHelper.GetTime(remainTime)
    end
end

function XUiSucceedBossMain:Refresh()
    --self.TxtTitle.text = self._Control:GetActivityTitle()
    self:RefreshRemainTime()
    self:RefreshChapters()
    self:RefreshShowRewardItems()
end

function XUiSucceedBossMain:RefreshChapters()
    local chapterIds = self._Control:GetChapterIds()
    for i, chapterId in ipairs(chapterIds) do
        local chapterConfig = self._Control:GetChapterConfig(chapterId)
        if not chapterConfig then
            XLog.Error("XUiSucceedBossMain:RefreshChapters error: chapterConfig not found, chapterId = " .. chapterId)
            return
        end

        local itemRootTransform = self["Chapter" .. i]
        if not itemRootTransform then
            XLog.Error("XUiSucceedBossMain:RefreshChapters error: Chapter" .. i .. " not found")
            return
        end

        local chapterItem = self.ChapterItems[i]
        if not chapterItem then
            local tempGameObject = XUiHelper.Instantiate(self.GridChapter, itemRootTransform)
            tempGameObject:GetComponent("RectTransform").anchoredPosition = VECTOR2_ZERO
            tempGameObject.gameObject:SetActiveEx(true)
            chapterItem = XUiSucceedBossMainChapterItem.New(tempGameObject, self)
            self.ChapterItems[i] = chapterItem
        end

        chapterItem:Open()
        chapterItem:Refresh(chapterId, i)
    end
end

function XUiSucceedBossMain:RefreshShowRewardItems()
    local showRewardId = self._Control:GetActivityShowRewardId()
    if XTool.IsNumberValid(showRewardId) then
        local rewardGoods = XRewardManager.GetRewardList(showRewardId)
        XUiHelper.RefreshCustomizedList(self.Grid256New.parent, self.Grid256New, #rewardGoods, function(index, go)
            local rewardItem = rewardGoods[index]
            local item = XUiGridCommon.New(self, go)
            item:Refresh(rewardItem)
        end)
    else
        self.Grid256New.gameObject:SetActiveEx(false)
    end
end

-- 这是一个跟随章节战斗开始，和结束的特效
function XUiSucceedBossMain:PlayFightingEffect()
    local fightingChapter = self._Control:GetFightingChapterId()
    if fightingChapter then
        local index = self._Control:GetChapterIndex(fightingChapter)
        if index then
            local name = "Chapter" .. index .. "FxEnable"
            self:StopAnimation("Chapter1FxEnable")
            self:StopAnimation("Chapter2FxEnable")
            self:StopAnimation("Chapter3FxEnable")
            self:PlayAnimation(name)
            XSaveTool.SaveData("UiSucceedBossMainEffect" .. XPlayer.Id, index)
        end
    else
        local chapterId = XSaveTool.GetData("UiSucceedBossMainEffect" .. XPlayer.Id)
        local index = self._Control:GetChapterIndex(chapterId)
        if index and index > 0 then
            local name = "Chapter" .. index .. "FxDisable"
            self:StopAnimation("Chapter1FxEnable")
            self:StopAnimation("Chapter2FxEnable")
            self:StopAnimation("Chapter3FxEnable")
            self:PlayAnimation(name)
            XSaveTool.SaveData("UiSucceedBossMainEffect" .. XPlayer.Id, 0)
        else
            self:StopAnimation("Chapter1FxEnable")
            self:StopAnimation("Chapter2FxEnable")
            self:StopAnimation("Chapter3FxEnable")
        end
    end
end

return XUiSucceedBossMain