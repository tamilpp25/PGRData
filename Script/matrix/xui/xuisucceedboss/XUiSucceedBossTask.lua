local XDynamicGridTask = require("XUi/XUiTask/XDynamicGridTask")
local XDynamicTableNormal = require("XUi/XUiCommon/XUiDynamicTable/XDynamicTableNormal")
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyupeng.
--- DateTime: 2024/6/4 9:58
---

local XUiSucceedBossTask = XLuaUiManager.Register(XLuaUi, "UiSucceedBossTask")

--重写父类方法
function XUiSucceedBossTask:OnAwake()

end

function XUiSucceedBossTask:OnStart()
    self:InitData()
    self:AutoRegisterBtnListener()
    self:InitBtnGroup()
    self.DynamicTable = XDynamicTableNormal.New(self.SViewTask)
    self.DynamicTable:SetProxy(XDynamicGridTask, self)
    self.DynamicTable:SetDelegate(self)
    self.GridTask.gameObject:SetActiveEx(false)
end

function XUiSucceedBossTask:OnEnable()
    self.IsEnable = true
    self:AutoRegisterEventListener()
    self.BtnGroup:SelectIndex(self.SelectTabIndex)

    -- 检查红点
    for index, eventId in ipairs(self.RedPointList) do
        XRedPointManager.Check(eventId, index)
    end
    self.IsEnable = false
end

function XUiSucceedBossTask:OnDisable()
    self:AutoRemoveEventListener()
end

function XUiSucceedBossTask:AutoRegisterEventListener()
    XEventManager.AddEventListener(XEventId.EVENT_FINISH_TASK, self.OnTaskChangeSync, self)
    XEventManager.AddEventListener(XEventId.EVENT_TASK_SYNC, self.OnTaskChangeSync, self)
    XEventManager.AddEventListener(XEventId.EVENT_FINISH_MULTI, self.OnTaskChangeSync, self)
    XEventManager.AddEventListener(XEventId.EVENT_TASK_FINISH_FAIL, self.OnTaskChangeSync, self)
end

function XUiSucceedBossTask:AutoRemoveEventListener()
    XEventManager.RemoveEventListener(XEventId.EVENT_FINISH_TASK, self.OnTaskChangeSync, self)
    XEventManager.RemoveEventListener(XEventId.EVENT_TASK_SYNC, self.OnTaskChangeSync, self)
    XEventManager.RemoveEventListener(XEventId.EVENT_FINISH_MULTI, self.OnTaskChangeSync, self)
    XEventManager.RemoveEventListener(XEventId.EVENT_TASK_FINISH_FAIL, self.OnTaskChangeSync, self)
end

function XUiSucceedBossTask:InitData()
    self.TaskGroups = self._Control:GetActivityTaskGroups()
    self.SelectTabIndex = 1
end

function XUiSucceedBossTask:AutoRegisterBtnListener()
    self:RegisterClickEvent(self.BtnBack, self.OnBtnBackClick)
    self:RegisterClickEvent(self.BtnMainUi, self.OnBtnMainUiClick)
end

function XUiSucceedBossTask:InitBtnGroup()
    local btns = {}
    for i = 1, 3 do
        table.insert(btns, self["BtnTabTask" .. i])
    end
    self.BtnGroup:Init(btns, function(index)
        self:OnBtnTabTaskClick(index)
    end)
    for index, btn in ipairs(btns) do
        btn.gameObject:SetActiveEx(XTool.IsNumberValid(self.TaskGroups[index]))
    end

    self.RedPointList = {}
    -- 红点
    for index, _ in ipairs(self.TaskGroups) do
        local eventId = self:AddRedPointEvent(btns[index], self.OnCheckTaskTabRed, self, { XRedPointConditions.Types.CONDITION_SUCCEED_BOSS_TASK_TAB }, index)
        table.insert(self.RedPointList, eventId)
    end
end

function XUiSucceedBossTask:OnCheckTaskTabRed(count, index)
    self.BtnGroup.TabBtnList[index - 1]:ShowReddot(count >= 0)
end

function XUiSucceedBossTask:OnBtnBackClick()
    self:Close()
end

function XUiSucceedBossTask:OnBtnMainUiClick()
    XLuaUiManager.RunMain()
end

function XUiSucceedBossTask:OnBtnTabTaskClick(index)
    if self.IsEnable or self.SelectTabIndex ~= index then
        if self:Refresh(index) then
            self:PlayGridAnimation()
        end
        --self:PlayAnimation("QieHuan")
    end

    self.SelectTabIndex = index
end

function XUiSucceedBossTask:Refresh(index)
    local taskGroupId = self.TaskGroups[index]
    if not XTool.IsNumberValid(taskGroupId) then
        return false
    end

    local taskDatas = XDataCenter.TaskManager.GetTimeLimitTaskListByGroupId(taskGroupId)
    --local taskDatas = XDataCenter.TaskManager.GetTaskDataByTaskType(1)
    --local temp = {}
    --for _, taskData in pairs(taskDatas) do
    --    table.insert(temp, taskData)
    --end
    --taskDatas = temp
    if not XTool.IsTableEmpty(taskDatas) then
        self.DynamicTable:SetDataSource(taskDatas)
        self.DynamicTable:ReloadDataSync(1)
        return true
    end
    return false
end

function XUiSucceedBossTask:OnTaskChangeSync()
    self:Refresh(self.SelectTabIndex)
end

function XUiSucceedBossTask:OnDynamicTableEvent(event, index, grid)
    if event == DYNAMIC_DELEGATE_EVENT.DYNAMIC_GRID_ATINDEX then
        grid:ResetData(self.DynamicTable.DataSource[index])

        -- 如果在播放中，刷新，那就强制显示alpha
        if grid.IsAnimation then
            local gridCanvasGroup = XUiHelper.TryGetComponent(grid.Transform, "PanelAnimation", "CanvasGroup")
            if gridCanvasGroup and gridCanvasGroup.alpha ~= 1 then
                gridCanvasGroup.alpha = 1
            end
        end

    elseif event == DYNAMIC_DELEGATE_EVENT.DYNAMIC_GRID_INIT then
        grid.GridTaskTimeline = XUiHelper.TryGetComponent(grid.Transform, "Animation/GridTaskEnable", "Transform")

    elseif event == DYNAMIC_DELEGATE_EVENT.DYNAMIC_GRID_RELOAD_COMPLETED then
        self:PlayGridAnimation()
    end
end

function XUiSucceedBossTask:PlayGridAnimation()
    local grids = self.DynamicTable:GetGrids()
    for i, grid in pairs(grids) do
        local gridCanvasGroup = XUiHelper.TryGetComponent(grid.Transform, "PanelAnimation", "CanvasGroup")
        gridCanvasGroup.alpha = 0

        local gridAnimationDelay = (i - 1) * 0.05
        self:Tween(gridAnimationDelay, function()
        end, function()
            grid.IsAnimation = false
            grid:PlayAnimation(function()
                local gridCanvasGroup = XUiHelper.TryGetComponent(grid.Transform, "PanelAnimation", "CanvasGroup")
                gridCanvasGroup.alpha = 1
            end)
        end)
    end
end

return XUiSucceedBossTask